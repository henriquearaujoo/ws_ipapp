package com.irandubamodulo01.util;

import javax.print.*;  
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.HashPrintServiceAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.event.PrintJobAdapter;
import javax.print.event.PrintJobEvent;

import java.io.ByteArrayInputStream;  
import java.io.IOException;
import java.io.InputStream;  
  
// Essa classe é a responsavel pela impressao. Ela detecta a impressora  
// instalada, recebe o texto e o imprime.  
public class ImpressaoUtil {  
  
    // variavel estatica porque será utilizada por inumeras threads  
    private static PrintService impressora;
    
    public ImpressaoUtil() {  
  
        detectaImpressoras();  
  
    }  
  
    // O metodo verifica se existe impressora conectada e a  
    // define como padrao.  
    public void detectaImpressoras() {  
  
        try {  
  
        	DocFlavor flavor = DocFlavor.SERVICE_FORMATTED.PRINTABLE;  
        	PrintServiceAttributeSet aset = new HashPrintServiceAttributeSet();
            PrintService[] ps = PrintServiceLookup.lookupPrintServices(flavor, aset);  
            for (PrintService p: ps) {  
  
                System.out.println("Impressora encontrada: " + p.getName());  
  
                if (p.getName().equals("DATA REGIS"))  {  
                //if (p.getName().equals("PDFCreator"))  {
                    System.out.println("Impressora Selecionada: " + p.getName());  
                    impressora = p;  
                    break;  
  
                }  
  
            }  
  
        } catch (Exception e) {  
  
            e.printStackTrace();  
  
        }  
  
    }  
  
    /*public synchronized boolean imprime(String texto) {  
  
    	
        // se nao existir impressora, entao avisa usuario  
        // senao imprime texto  
        if (impressora == null) {  
  
            String msg = "Nennhuma impressora foi encontrada. Instale uma impressora padrão \r\n(Generic Text Only) e reinicie o programa.";  
            System.out.println(msg);  
            return false;
  
        } else {  
  
            try {  
  
                dpj = impressora.createPrintJob();  
                stream = new ByteArrayInputStream(texto.getBytes());  
  
                flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;  
                doc = new SimpleDoc(stream, flavor, null);  
                dpj.print(doc, null);  
                                  
            } catch (PrintException e) {  
  
                e.printStackTrace();  
                
                return false;
  
            }finally{
            	try {
					stream.close();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }  
  
        }  
  
        return false;  
  
    }*/
    	    
    public void imprimir(String conteudo) throws IOException, PrintException{
    	
    	 String defaultPrinter = 
       	      PrintServiceLookup.lookupDefaultPrintService().getName();
       	    System.out.println("Default printer: " + defaultPrinter);
       	    //PrintService service = PrintServiceLookup.lookupDefaultPrintService();
       	    
       	    // prints the famous hello world! plus a form feed
       	    InputStream is = new ByteArrayInputStream(conteudo.getBytes("UTF8"));

       	    PrintRequestAttributeSet  pras = new HashPrintRequestAttributeSet();
       	    pras.add(new Copies(1));

       	    DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE;
       	    Doc doc = new SimpleDoc(is, flavor, null);
       	    DocPrintJob job = impressora.createPrintJob();

       	    PrintJobWatcher pjw = new PrintJobWatcher(job);
       	    job.print(doc, pras);
       	    pjw.waitForDone();
       	    is.close();
    }
    
    class PrintJobWatcher {
    	  boolean done = false;

    	  PrintJobWatcher(DocPrintJob job) {
    	    job.addPrintJobListener(new PrintJobAdapter() {
    	      public void printJobCanceled(PrintJobEvent pje) {
    	        allDone();
    	      }
    	      public void printJobCompleted(PrintJobEvent pje) {
    	        allDone();
    	      }
    	      public void printJobFailed(PrintJobEvent pje) {
    	        allDone();
    	      }
    	      public void printJobNoMoreEvents(PrintJobEvent pje) {
    	        allDone();
    	      }
    	      void allDone() {
    	        synchronized (PrintJobWatcher.this) {
    	          done = true;
    	          System.out.println("Printing done ...");
    	          PrintJobWatcher.this.notify();
    	        }
    	      }
    	    });
    	  }
    	  public synchronized void waitForDone() {
    	    try {
    	      while (!done) {
    	        wait();
    	      }
    	    } catch (InterruptedException e) {
    	    }
    	  }
    }
  
}   