package br.com.speedy.wsipapp;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import br.com.speedy.wsipapp.model.*;
import br.com.speedy.wsipapp.repository.*;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import br.com.speedy.wsipapp.enumerated.StatusCompra;
import br.com.speedy.wsipapp.enumerated.TipoDestinoRetirada;
import br.com.speedy.wsipapp.util.Filtro;
import br.com.speedy.wsipapp.util.FiltroUtil;
import br.com.speedy.wsipapp.util.JpaUtil;
import br.com.speedy.wsipapp.util.PeixeDisponivel;


@Path("/myresource")
public class MyResource {
	
	private Compra compra;
	
	private Observacao observacao;


	public MyResource() {
		// TODO Auto-generated constructor stub
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getPeixes")
	public List<Peixe> getTodos() {
		// PeixeRn peixe = new PeixeRn();
		EntityManager manager = JpaUtil.getEntityManager();
		PeixeRepository peixes = new PeixeRepository(manager);
		List<Peixe> lista = peixes.todos();
		return lista;
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/logar")
	public String logar(String data) {
		 
		JSONObject object = new JSONObject(data);
		
		String login = object.getString("login");
		String senha = object.getString("senha");
		String imei = object.getString("imei");
		
		EntityManager manager = JpaUtil.getEntityManager();
		UsuarioRepository usuarios = new UsuarioRepository(manager);

		Usuario usuario = usuarios.getUsuario(login, senha);
		
		JSONObject jUsuario = new JSONObject();
		jUsuario.put("valido", usuario == null ? false : true);
		if(usuario != null){
			jUsuario.put("id", usuario.getId());
			jUsuario.put("nome", usuario.getNome());

			UltimoLoginRepository loginRepository = new UltimoLoginRepository(manager);
			UltimoLogin ul = loginRepository.getUltimoLoginUsuario(usuario);
			JSONObject jUL = new JSONObject();
			jUL.put("valido", ul == null ? false : true);
			if (ul != null) {
				ul.setData(new Date());
				jUL.put("id", ul.getId());
				jUL.put("data", new SimpleDateFormat("hh:mm:ss dd/MM/yyyy").format(ul.getData()));
				loginRepository.salvarUltimoLogin(ul);
			}
			jUsuario.put("ultimologin", jUL);
		}
		
		return jUsuario.toString();
	}

	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/salvarUsuario")
	public String salvarUsuario(String dados){

		JSONObject retorno = new JSONObject();

		try {
			JSONObject object = new JSONObject(dados);

			Usuario usuario = new Usuario();
			usuario.setId(object.getLong("id"));
			String senha = object.getString("senha");

			EntityManager manager = JpaUtil.getEntityManager();

			UsuarioRepository uRepo = new UsuarioRepository(manager);

			usuario = uRepo.getUsuarioPorId(usuario);

			usuario.setSenha(senha);

			uRepo.salvarUsuario(usuario);

			UltimoLoginRepository loginRepository = new UltimoLoginRepository(manager);
			UltimoLogin ultimoLogin = loginRepository.getUltimoLoginUsuario(usuario);
			if (ultimoLogin == null)
				ultimoLogin = new UltimoLogin();
			ultimoLogin.setData(new Date());
			ultimoLogin.setUsuario(usuario);

			loginRepository.salvarUltimoLogin(ultimoLogin);

			retorno.put("valido", true);
		}catch (Exception e){
			e.printStackTrace();
			retorno.put("valido", false);
		}

		return retorno.toString();
	}
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getFornecedores")
	public List<Fornecedor> getFornecedores() {
		
		EntityManager manager = JpaUtil.getEntityManager();
		FornecedoresRepository fornecedores = new FornecedoresRepository(manager);
		BarcoRepository barcoRepository = new BarcoRepository(manager);
		List<Fornecedor> lista = fornecedores.todos();
		
		for (Fornecedor fornecedor : lista) {
			fornecedor.setBarcos(barcoRepository.getBarcosPorFornecedor(fornecedor));
		}
		
		return lista;
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/salvarCompra")
	public Boolean salvarCompra(String data) {
		
		try {
			JSONObject object = new JSONObject(data);
			compra = new Compra();
			compra = getCompra(object);	
			EntityManager manager = JpaUtil.getEntityManager();
			CompraRepository compras = new CompraRepository(manager);
			ObservacaoRepository obs = new ObservacaoRepository(manager);
			compras.salvarCompra(compra, observacao);
			
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	
	public Compra getCompra(JSONObject object){
		
		compra = new Compra();
		if (object.has("id"))
			compra.setId(object.getLong("id"));
		try {
			compra.setDataCompra(new SimpleDateFormat("dd/MM/yyyy hh:mm:ss").parse(object.getString("dataCompra")));
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		compra.setAutorizado(null);
		compra.setCodigo(object.getString("codigo"));
		compra.setPause(object.getBoolean("pause"));
		compra.setStatus(object.getBoolean("status"));
		compra.setLotes(new ArrayList<Lote>());
		compra.setValorTotal(new BigDecimal(object.getDouble("valorTotal")));
		compra.setStatusCompra(StatusCompra.ENVIADO);
		
		JSONObject jsonFornec = object.getJSONObject("fornecedor");
		JSONObject jsonBarco = object.getJSONObject("barco");
		
		Fornecedor fornecedor = new Fornecedor();
		fornecedor.setId(jsonFornec.getLong("id"));
		
		Barco barco = new Barco();
		barco.setId(jsonBarco.getLong("id"));
		
		compra.setFornecedor(fornecedor);
		compra.setBarco(barco);
		JSONArray jsonArray = object.getJSONArray("lotes");
		
		for (int i = 0, tam = jsonArray.length(); i < tam ; i++) {
			
			Lote lote = new Lote();
			Peixe p = new Peixe();
			
			JSONObject loteJson =  jsonArray.getJSONObject(i);
			JSONObject peixeJson =  loteJson.getJSONObject("peixe");
			p.setId(peixeJson.getLong("id"));
			
			if (loteJson.has("id"))
				lote.setId(loteJson.getLong("id"));
			lote.setPeixe(p);
			lote.setCompra(new Compra());
			lote.setCompra(compra);
			lote.setFornecedor(new Fornecedor());
			lote.setFornecedor(compra.getFornecedor());
			lote.setPeso(new BigDecimal(loteJson.getDouble("peso")));
			lote.setQtdCaixas(loteJson.getInt("qtdCaixas"));
			lote.setValor(new BigDecimal(loteJson.getDouble("valor")));
			lote.setValorUnitarioPeixe(new BigDecimal(loteJson.getDouble("valorUnitarioPeixe")));
			lote.setSequencia(loteJson.getInt("sequencia"));
			lote.setDescontokg(new BigDecimal(loteJson.getDouble("descontokg")));
			lote.setPesoCacapa(new BigDecimal(loteJson.getDouble("pesoCacapa")));
			lote.setAcrescimo(BigDecimal.ZERO);
			lote.setDesconto(BigDecimal.ZERO);
			
			compra.getLotes().add(lote);
		}
		
		if (!compra.getPause() && object.getString("observacao") != null && !object.getString("observacao").isEmpty()){
			observacao = new Observacao();
			observacao.setData(new Date());
			observacao.setCompra(compra);
			observacao.setObservacao(object.getString("observacao"));
			Usuario usu = new Usuario();
			usu.setId(object.getLong("idUsuarioCompra"));
			observacao.setUsuario(usu);
			compra.setObservacao(null);
		}else{
			compra.setObservacao(object.getString("observacao"));
			observacao = null;
		}
		
		return compra;
	}
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getComprasSalvas")
	public List<Compra> getComprasSalvas() {
		
		EntityManager manager = JpaUtil.getEntityManager();
		CompraRepository compraR = new CompraRepository(manager);
		List<Compra> lista = compraR.getComprasSalvas();
		
		return lista;
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getLotesCompra")
	public List<Lote> getLotesCompra(String idCompra) {
		
		EntityManager manager = JpaUtil.getEntityManager();
		LoteRepository lotes = new LoteRepository(manager);
		List<Lote> lista = lotes.getLotesCompra(idCompra);
		
		return lista;
	}
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getConfiguracoes")
	public Configuracoes getConfiguracoes(){
		EntityManager manager = JpaUtil.getEntityManager();
		ConfiguracoesRepository repository = new ConfiguracoesRepository(manager);
		List<Configuracoes> list = repository.getConfiguracoes();
		
		return list.size() > 0 ? list.get(0) : null;
	}

	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getPeixesFiltro")
	public List<Peixe> getPeixesFiltro(String dados){
		EntityManager manager = JpaUtil.getEntityManager();
		PeixeRepository peixes = new PeixeRepository(manager);
		Filtro filtro = FiltroUtil.getFiltroPeixe(dados);
		List<Peixe> lista = peixes.getPeixesFiltro(filtro);
		return lista;
	}

	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getPeixesDisponiveis")
	public List<PeixeDisponivel> getPeixesDisponiveis(String dados){
		EntityManager manager = JpaUtil.getEntityManager();
		ArmazenamentoRepository repository = new ArmazenamentoRepository(manager);
		Filtro filtro = FiltroUtil.getFiltroPeixesDisponivel(dados);
		return repository.getPeixesDisponiveis(filtro);
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/getPeixesArmazenados")
	public List<PeixeDisponivel> getPeixesArmazenados(String dados){
		EntityManager manager = JpaUtil.getEntityManager();
		ArmazenamentoRepository repository = new ArmazenamentoRepository(manager);
		Filtro filtro = FiltroUtil.getArmazenamentos(dados);
		return repository.getPeixesArmazenados(filtro);
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/salvarArmazenamento")
	public Boolean salvarArmazenamento(String dados){
		try {
			EntityManager manager = JpaUtil.getEntityManager();
			Armazenamento armazenamento = getArmazenamento(dados);
			ArmazenamentoRepository repository = new ArmazenamentoRepository(manager);
			repository.salvarAmazenamento(armazenamento);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		
		return true;
		
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/salvarRetirada")
	public Boolean salvarRetirada(String dados){
		try {
			EntityManager manager = JpaUtil.getEntityManager();
			Retirada retirada = getRetirada(dados);
			RetiradaRepository repository = new RetiradaRepository(manager);
			repository.salvarRetirada(retirada);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		
		return true;
		
	}
	
	public Retirada getRetirada(String dados){
		
		Retirada retirada = new Retirada();
		
		JSONObject object = new JSONObject(dados);
		retirada.setPeso(new BigDecimal(object.getDouble("peso")));
		retirada.setDestino(TipoDestinoRetirada.valueOf(object.getString("destino")));
		
		Armazenamento armazenamento = new Armazenamento();
		JSONObject jArm = object.getJSONObject("peixe");
		armazenamento.setId(jArm.getLong("id"));
		
		Peixe peixe = new Peixe();
		JSONObject jPeixe = object.getJSONObject("peixe");
		peixe.setId(jPeixe.getLong("id"));
		
		Usuario usuario = new Usuario();
		JSONObject jUsuario = object.getJSONObject("usuario");
		usuario.setId(jUsuario.getLong("id"));
		
		retirada.setArmazenamento(armazenamento);
		retirada.setPeixe(peixe);
		retirada.setUsuario(usuario);
		
		return retirada;
	}
	
	public Armazenamento getArmazenamento(String dados){
		
		Armazenamento armazenamento = new Armazenamento();
		
		JSONObject object = new JSONObject(dados);
		armazenamento.setCamara(object.getString("camara"));
		armazenamento.setCurral(object.getString("curral"));
		armazenamento.setPeso(new BigDecimal(object.getDouble("peso")));
		
		Peixe peixe = new Peixe();
		JSONObject jPeixe = object.getJSONObject("peixe");
		peixe.setId(jPeixe.getLong("id"));
		
		Usuario usuario = new Usuario();
		JSONObject jUsuario = object.getJSONObject("usuario");
		usuario.setId(jUsuario.getLong("id"));
		
		armazenamento.setPeixe(peixe);
		armazenamento.setUsuario(usuario);
		
		return armazenamento;
	}
}
